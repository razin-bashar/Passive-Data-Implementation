<?php

/**
 * @author Ravi Tamada
 * @link http://www.androidhive.info/2012/01/android-login-and-registration-with-php-mysql-and-sqlite/ Complete tutorial
 */

class DB_Functions {

    private $conn;

    // constructor
    function __construct() {
        require_once 'DB_Connect.php';
        // connecting to database
        $db = new Db_Connect();
        $this->conn = $db->connect();
    }

    // destructor
    function __destruct() {
        
    }

    /**
     * Storing new user
     * returns user details
     */
    public function storeUser($name, $email, $password) {
	//ALTER TABLE tablename AUTO_INCREMENT = 1
        $stmt = $this->conn->prepare("INSERT INTO Client_Info(Name, Email,Password) VALUES('$name', '$email', '$password')");
        $result = $stmt->execute();
        $stmt->close();

        // check for successful store'
        if ($result) {
            $stmt = $this->conn->prepare("SELECT * FROM Client_Info WHERE email = '$email'");
            $stmt->execute();
            $user = $stmt->get_result()->fetch_assoc();
            $stmt->close();

            return $user;
        } else {
            return false;
        }
    }

    /**
     * Get user by email and password
     */
    public function getUserByEmailAndPassword($email, $password) {

        $stmt = $this->conn->prepare("SELECT * FROM Client_Info WHERE Email = '$email' and Password = '$password'");

        $result=$stmt->execute();
       
        if ($result) {
                $user = $stmt->get_result()->fetch_assoc();
        	$stmt->close();
                return $user;
        } else {
            return NULL;
        }
    }

    /**
     * Check user is existed or not
     */
    public function isUserExisted($email) {
        $stmt = $this->conn->prepare("SELECT * from Client_Info WHERE email = '$email'");
        $stmt->execute();

        $stmt->store_result();

        if ($stmt->num_rows > 0) {
            // user existed 
            $stmt->close();
            return true;
        } else {
            // user not existed
            $stmt->close();
            return false;
        }
    }

    public function isSubscribeExisted($BloodGroup,$Id,$Location) {
	$stmt = $this->conn->prepare("SELECT * from Subscription WHERE BloodGroup = UPPER('$BloodGroup') and Id= '$Id' and Location=UPPER('$Location')");
	$stmt->execute();

	$stmt->store_result();

	if ($stmt->num_rows > 0) {
		 // user existed 
		  $stmt->close();
		  return true;
	} else {
		 // user not existed
		 $stmt->close();
		 return false;
	}
   }

    public function storeSubscriber($BloodGroup,$Id,$Location) {
	$stmt = $this->conn->prepare("ALTER TABLE Subscription AUTO_INCREMENT = 1");
	$result = $stmt->execute();
        $stmt->close();
            	
	//echo $BloodGroup;
	//echo $Id;
	//echo $Location;
 
        $stmt = $this->conn->prepare("INSERT INTO Subscription(BloodGroup,Id,Location) VALUES(UPPER('$BloodGroup'),'$Id',UPPER('$Location'))");
        $result = $stmt->execute();
        $stmt->close();

        // check for successful store'
        if ($result) {
            $stmt = $this->conn->prepare("SELECT * FROM Subscription WHERE BloodGroup=UPPER('$BloodGroup')and Id='$Id' and Location=UPPER('$Location')");
            $stmt->execute();
            $user = $stmt->get_result()->fetch_assoc();
            $stmt->close();

            return $user;
        } else {
            return false;
        }
    }

    
	
    

    public function isdataExisted($Name, $Location, $BloodGroup,$Phone) {
	$stmt = $this->conn->prepare("SELECT * from Data WHERE Name =UPPER('$Name') and Location =('$Location') and BloodGroup =UPPER('$BloodGroup') and Phone ='$Phone'");
	$stmt->execute();

	$stmt->store_result();

	if ($stmt->num_rows > 0) {
		 // user existed 
		  $stmt->close();
		  return true;
	} else {
		 // user not existed
		 $stmt->close();
		 return false;
	}
   }
   
    public function  storeData($Name, $Location, $BloodGroup,$Phone) {
	//ALTER TABLE tablename AUTO_INCREMENT = 1
	$stmt = $this->conn->prepare("ALTER TABLE Data AUTO_INCREMENT = 1");
	$result = $stmt->execute();
        $stmt->close();

        $stmt = $this->conn->prepare("INSERT INTO Data(Name, Location, BloodGroup,Phone,Time) VALUES(UPPER('$Name'), UPPER('$Location'), UPPER('$BloodGroup'),'$Phone',now())");//date('D, d M Y H:i:s T')
        $result = $stmt->execute();
        $stmt->close();

        // check for successful store'
        if ($result) {
            

            return true;
        } else {
            return false;
        }
    }


    /**
     * Encrypting password
     * @param password
     * returns salt and encrypted password
     */
    public function hashSSHA($password) {

        $salt = sha1(rand());
        $salt = substr($salt, 0, 10);
        $encrypted = base64_encode(sha1($password . $salt, true) . $salt);
        $hash = array("salt" => $salt, "encrypted" => $encrypted);
        return $hash;
    }

    /**
     * Decrypting password
     * @param salt, password
     * returns hash string
     */
    public function checkhashSSHA($salt, $password) {

        $hash = base64_encode(sha1($password . $salt, true) . $salt);

        return $hash;
    }

}

?>
